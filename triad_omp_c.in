T *
template(T,new_array)(size_t s)
{
	T *a = aligned_alloc(array_alignment, s*sizeof(T));
	if(!a) sys_fatal("Failed allocation.");
	#pragma omp target enter data map(alloc: a[0:s])
	return a;
}

void
template(T,free_array)(size_t s, T *a)
{
	#pragma omp target exit data map(release: a[0:s])
	free(a);
}

void
template(T,init_array)(size_t s, T *a, T init_a)
{
	#pragma omp target teams distribute parallel for simd
	for(size_t i = 0; i < s; i++)
		a[i] = init_a;
}

void
template(T,to_cpu)(size_t s, T *a)
{
	#pragma omp target update from(a[0:s])
}

void
template(T,triad)(size_t s, T * restrict a, T * restrict b, T * restrict c)
{
	const T sc = start_scalar;
	#pragma omp target teams distribute parallel for simd
	for(size_t i = 0; i < s; i++)
		a[i] = b[i] + sc * c[i];
}

void
template(T,check_solution)(size_t nt, size_t s, T *a, T *b, T *c)
{
	T ta = start_a;
	T tb = start_b;
	T tc = start_c;
	const T sc = start_scalar;
	for(size_t i = 0; i < nt; i++)
		ta = tb + sc * tc;
	double ea = 0;
	double eb = 0;
	double ec = 0;
	for(size_t i = 0; i < s; i++){
		ea += fabs(a[i] - ta);
		eb += fabs(b[i] - tb);
		ec += fabs(c[i] - tc);
	}
	double tol = 100.0;
	if(sizeof(T) == 4)
		tol *= FLT_EPSILON;
	else
		tol *= DBL_EPSILON;
	if(ea > tol)
		printf("Error of a too large: %g\n", ea);
	if(eb > tol)
		printf("Error of b too large: %g\n", eb);
	if(ec > tol)
		printf("Error of c too large: %g\n", ec);
}

void
template(T,run_triad)(size_t nt, size_t s)
{
	size_t size = s*sizeof(T);

	printf("Repeat: %zu\n", nt);
	printf("Length: %zu\n", s);
	printf("Element: %zu B\n", sizeof(T));
	printf("Size: %.0f KB\n", size*1E-3);
	printf("Footprint: %.0f KB\n", 3*size*1E-3);

	T *a = template(T,new_array)(s);
	T *b = template(T,new_array)(s);
	T *c = template(T,new_array)(s);

	template(T,init_array)(s, a, start_a);
	template(T,init_array)(s, b, start_b);
	template(T,init_array)(s, c, start_c);

	const double prec = omp_get_wtick();
	printf("wtick: %.g sec\n", prec);
	double t = -omp_get_wtime();

	for(size_t i = 0; i < nt; i++)
		template(T,triad)(s, a, b, c);

	t += omp_get_wtime();

	template(T,to_cpu)(s, a);
	template(T,to_cpu)(s, b);
	template(T,to_cpu)(s, c);
	template(T,check_solution)(nt, s, a, b, c);

	template(T,free_array)(s, a);
	template(T,free_array)(s, b);
	template(T,free_array)(s, c);

	printf("Runtime: %.9f sec\n", t);
	printf("Bandwidth: %.3f GB/s\n", 3*size*nt*1E-9 / t);
}
